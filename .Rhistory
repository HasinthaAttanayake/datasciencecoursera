library(datasets)
data(iris)
?iris
?colMean
?colmeans
?colMeans
colMeans(iris, na.rm = TRUE)
colMeans(iris[,c("Sepal.Length")], na.rm = TRUE)
?split
?iris
split(iris,Species)
split(iris,"Species")
iris
x <- split(iris,"virginica")
x
?split
x <- iris[iris$Species == virginica,]
x <- iris[iris$Species == "virginica",]
x
colMeans(x[x$Sepal.Length])
colMeans(x[x$Sepal.Length,])
?mean
class(x)
colMeans(x)
colMeans(x. dimes = 4)
colMeans(x. dims = 4)
as.vector(x)
colmeans(as.vector(x))
colMeans(as.vector(x))
colMeans(as.numeric(x))
as.numeric(x)
x2 <- x[x$Sepal.Length,]
x2
x2 <- x[c("Sepal.Length"),]
x2
?apply
apply(x,2,mean)
apply(x,1,mean)
apply(x[,1:4],1,mean)
apply(x[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
?tapply
apply(mtcars,2,mean)
lapply(mtcars,mean)
sapply(mtcars,cyl,mean)
with(mtcars, tapply(mpg,cyl,mean))
with(mtcars, tapply(hp,cyl,mean))
209.21429-82.63636
debug(ls)
?debug
ls()
exit
0
leave
?help
pressure <- c[68.728,77.524,82.528,90.088,96.365,99.811,100.811,98.877,96.855]
?vector
pressure <- c(68.728,77.524,82.528,90.088,96.365,99.811,100.811,98.877,96.855)
pressure
x1 <- c(0.000,0.0858,0.1452,0.3787,0.448,0.6332,0.7752,0.908,1.000)
x2 <- c(0.000,0.1848,0.2694,0.4184,0.5512,0.6772,0.7729,0.8959,1.000)
y1 <- x1
y1 <- x2
?plot
plot(pressure,x1,y1)
plot(pressure,x1)
plot(pressure,y1)
plot(x1,pressure,xlab="mole fraction",type="1",col="red")
plot(x1,pressure,xlab="mole fraction",col="red")
lines(y1,pressure, col="green")
lines(x1,pressure, col="red")
x1 <- c(0.000,0.0858,0.1452,0.2787,0.448,0.6332,0.7752,0.908,1.000)
lines(y1,pressure, col="green")
lines(x1,pressure, col="red")
plot(x1,pressure,xlab="mole fraction",type="1",col="red")
plot(x1,pressure,xlab="mole fraction",col="red")
lines(y1,pressure, col="green")
lines(x1,pressure, col="red")
clear()
cat("\014")
myapp = oauth_app("github", key = "7afc0c33df5a0da9273a", secret = "a94d704f963407624a96f48f2139e42a8d4513ed")
?oauth()
library(httr)
install.packages("httr")
library(httr)
myapp = oauth("github", key = "7afc0c33df5a0da9273a", "a94d704f963407624a96f48f2139e42a8d4513ed")
?oauth
??oauth
myapp = oauth_app("github", key = "7afc0c33df5a0da9273a", "a94d704f963407624a96f48f2139e42a8d4513ed")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight, text(x=x,y=y,labels = c("dick","vag")))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight, text(labels = c("dick","vag")))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight, text(wieght, Time, labels = c("dick","vag")))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight, text(weight, Time, labels = c("dick","vag")))
library(datasets)
data(airquality)
library(ggplot2)
install.packages("ggplot2")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
getwd()
setwd("/Users/Hasintha/Documents/University/coursera/Data_Science")
getwd()
setwd("/Repo")
setwd("Repo")
getwd()
getwd(.)
getwd(".")
setwd("UCI HAR Dataset")
ls
ls()
ls(all)
list()
list.files("")
list.files(path=".")
?require
packages(data.table)
library(data.table)
install.packages("data.table")
#cwd <- getwd()
run_analysis.R
#test dataset file paths
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
#dsxtest <- "./UCI HAR Dataset/test/X_test.txt"
#dsytest <- "./UCI HAR Dataset/test/y_test.txt"
#dssubject_test <- "./UCI HAR Dataset/test/subject_test.txt"
#training dataset file paths
#dsxtrain <- "./UCI HAR Dataset/train/X_train.txt"
#dsytrain <- "./UCI HAR Dataset/train/y_train.txt"
#dssubject_train <- "./UCI HAR Dataset/train/subject_train.txt"
#load data individual data sets
#X_test <- read.table
#load data
##TEST
## Create one R script called run_analysis.R that does the following:
## 1. Merges the training and the test sets to create one data set.
## 2. Extracts only the measurements on the mean and standard deviation for each measurement.
## 3. Uses descriptive activity names to name the activities in the data set
## 4. Appropriately labels the data set with descriptive activity names.
## 5. Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
if (!require("data.table")) {
install.packages("data.table")
}
if (!require("reshape2")) {
install.packages("reshape2")
}
require("data.table")
require("reshape2")
# Load: activity labels
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
# Load: data column names
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
# Extract only the measurements on the mean and standard deviation for each measurement.
extract_features <- grepl("mean|std", features)
# Load and process X_test & y_test data.
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
names(X_test) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_test = X_test[,extract_features]
# Load activity labels
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# Bind data
test_data <- cbind(as.data.table(subject_test), y_test, X_test)
# Load and process X_train & y_train data.
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(X_train) = features
# Extract only the measurements on the mean and standard deviation for each measurement.
X_train = X_train[,extract_features]
# Load activity data
y_train[,2] = activity_labels[y_train[,1]]
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
# Bind data
train_data <- cbind(as.data.table(subject_train), y_train, X_train)
# Merge test and train data
data = rbind(test_data, train_data)
id_labels   = c("subject", "Activity_ID", "Activity_Label")
data_labels = setdiff(colnames(data), id_labels)
melt_data      = melt(data, id = id_labels, measure.vars = data_labels)
# Apply mean function to dataset using dcast function
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
write.table(tidy_data, file = "./tidy_data.txt")
dsxtest <- "UCI HAR Dataset/test/X_test.txt"
X_test <- read.table(dsxtest)
dsxtest <- "UCI HAR Dataset//test//X_test.txt"
X_test <- read.table(dsxtest)
getwd()
setwd("/Users/Hasintha/Documents/University/coursera/Data_Science/Repo")
X_test <- read.table(dsxtest)
View(X_test)
dsxtest <- "UCI HAR Dataset/test/X_test.txt"
X_test <- read.table(dsxtest)
getwd()
dsxtest <- "UCI HAR Dataset/test/X_test.txt"
dsytest <- "UCI HAR Dataset/test/y_test.txt"
dssubject_test <- "UCI HAR Dataset/test/subject_test.txt"
training dataset file paths
dsxtrain <- "UCI HAR Dataset/train/X_train.txt"
dsytrain <- "UCI HAR Dataset/train/y_train.txt"
dssubject_train <- "UCI HAR Dataset/train/subject_train.txt"
#test dataset file paths
dsxtest <- "UCI HAR Dataset/test/X_test.txt"
dsytest <- "UCI HAR Dataset/test/y_test.txt"
dssubject_test <- "UCI HAR Dataset/test/subject_test.txt"
#training dataset file paths
dsxtrain <- "UCI HAR Dataset/train/X_train.txt"
dsytrain <- "UCI HAR Dataset/train/y_train.txt"
dssubject_train <- "UCI HAR Dataset/train/subject_train.txt"
X_test <- read.table(dsxtest)
y_test <- read.table(dsytest)
subject_test <- read.table(dssubject_test)
X_train <- read.table(dsxtrain)
y_train <- read.table(dsytrain)
subject_train <- read.table(dssubject_train)
View(X_test)
View(X_test)
View(X_train)
View(X_train)
View(y_test)
View(y_test)
View(y_train)
View(y_train)
View(subject_test)
View(subject_test)
View(subject_train)
View(subject_train)
dsactivity_labels <- "UCI HAR Dataset/activity_labels.txt"
features <- read.table(dsfeatures)[2,]
dsfeatures <- "UCI HAR Dataset/features.txt"
features <- read.table(dsfeatures)[2,]
View(features)
features <- read.table(dsfeatures)[,2]
head(features)
f1 <- as.vector(features)
head(f1)
length(f1)
f1[1]
f1[561]
t1 <- c("subject","label",f1)
length(t1)
t1[1:3]
combined_data <- cbind(merged_subject,c1)
source('~/Documents/University/coursera/Data_Science/Repo/run_analysis.R')
View(combined_data)
?select
??select
install.packages("plyr","dplyr")
install.packages("plyr", "dplyr")
library(plyr)
install.packages(dplyr)
install.packages("dplyr")
subdata <- select(combined_data, contains(".mean."), contains(".std."))
library(reshape2)
library(stringr)
subdata <- select(combined_data, contains(".mean."), contains(".std."))
select?
?select
??select
library(dplyr)
subdata <- select(combined_data, contains(".mean."), contains(".std."))
View(subdata)
c(1:6)
c(1,2,3,4,5,6)
c(1,2,3,4,5,6)cc
class(c1$activity)
merged_data <- cbind(merged_subject,c1)
subdata <- select(merged_data,subject,activity, contains(".mean."), contains(".std."))
subdata$activity <- mapvalues(subdata$activity, from = c(1:6), to = activity_labels)
activity_labels <- as.vector(read.table(dsactivity_labels)[,2])
subdata$activity <- mapvalues(subdata$activity, from = c(1:6), to = activity_labels)
View(subdata)
View(subdata)
subdata$subject <- as.factor(subdata$subject)
subdata$activity <- as.factor(subdata$activity)
splitdata <- split(select(subdata, 3:68), list(subdata$subject, subdata$activity))
meandata <- lapply(splitdata, function(x) apply(x,2,mean,na.rm=TRUE))
tidydata <- data.frame(t(sapply(meandata,c)))
View(tidydata)
factors <- data.frame(t(sapply(strsplit(rownames(tidydata), "[.]"),c)))
tidydata <- cbind(factors, tidydata)
tidydata <- dplyr::rename(tidydata,subject = X1, activity = X2)
tidydata$subject <- as.factor(tidydata$TestSubject)
tidydata$activity <- as.factor(tidydata$activity)
rownames(tidydata) <- NULL
View(tidydata)
write.table(tidydata,"tidy_data.txt",row.names = false)
write.table(tidydata,"tidy_data.txt",row.names = FALSE)
